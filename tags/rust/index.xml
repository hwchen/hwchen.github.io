<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rust on walther chen</title>
    <link>http://waltherchen.com/tags/rust/</link>
    <description>Recent content in Rust on walther chen</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 29 Dec 2015 12:32:33 -0500</lastBuildDate>
    <atom:link href="http://waltherchen.com/tags/rust/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Learning and Rust</title>
      <link>http://waltherchen.com/post/learning_and_rust/</link>
      <pubDate>Tue, 29 Dec 2015 12:32:33 -0500</pubDate>
      
      <guid>http://waltherchen.com/post/learning_and_rust/</guid>
      <description>

&lt;p&gt;Rambling thoughts ahead:&lt;/p&gt;

&lt;p&gt;So, it looks like after pushing for Haskell, it didn&amp;rsquo;t work out (yet, at least). I think that it&amp;rsquo;s partly because my mindset is not currently capable of keeping up with Haskell&amp;rsquo;s abstraction levels, and also that Haskell is difficult to move from toy to &amp;ldquo;real program&amp;rdquo;, at least in my experience.&lt;/p&gt;

&lt;p&gt;In any case, in the fall, I decided to focus less on Haskell. The stuff I cared most about was functions like map, filter, and fold, as well as structuring data.&lt;/p&gt;

&lt;p&gt;My experience from work has been that not knowing what data is flowing through code is probably the biggest headache. (Javascript!). Followed by lack of compile-time guarantees. Lack of coverage of all control paths is also fairly painful. This is all pretty much summed up by one of my most common Javascript errors: &lt;code&gt;cannot read &#39;foo&#39; of undefined&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Anyways, Haskell provides solutions to all of the above in spades, but something about how it handles state in larger programs was hard for me to wrap my head around. I think that the choice of threading config/state through a large program or using a monad transformer (which I could only barely understand) were the last straws. So great for Euler Project, but hard for me personally to do other things.&lt;/p&gt;

&lt;h2 id=&#34;rust:04cfde395ab3764661f29f5dbddcb2dc&#34;&gt;Rust&lt;/h2&gt;

&lt;p&gt;Rust seems to be more accessible for my brain, while also providing many of the guarantees that I enjoyed from Haskell. Plus it has a community geared towards beginners and has great tooling for development.&lt;/p&gt;

&lt;p&gt;Since I like challenges, I also enjoy that Rust has it&amp;rsquo;s own difficult high-level concept: memory management without garbage collection. Or, let&amp;rsquo;s say it&amp;rsquo;s memory management done mostly at compile time. That means that in code, I need to know a lot about how long variables live, and how I can borrow them. Fun!&lt;/p&gt;

&lt;p&gt;Anyways, long story short, I think that Rust is great for me now, and I can see it carrying me a long way in my career. Itsatisfies my need to tweak, safely. It has enough conveniences that it doesn&amp;rsquo;t feel like I&amp;rsquo;m writing C. (It&amp;rsquo;s more like a verbose Python). It has my favorite high-level concepts from Haskell (data types, type inference, higher-order functions). And it has brackets! Who knew, my time in Javascript has taught me to love brackets.&lt;/p&gt;

&lt;p&gt;I still love Haskell, though, and hope that there will be a time I&amp;rsquo;ll get back to it in the future when I&amp;rsquo;m more experienced.&lt;/p&gt;

&lt;h2 id=&#34;learning-rust:04cfde395ab3764661f29f5dbddcb2dc&#34;&gt;Learning, Rust&lt;/h2&gt;

&lt;p&gt;So, learning Rust for real this time. Which has also corresponded with leveling up in programming in general.&lt;/p&gt;

&lt;p&gt;Over the last &lt;sup&gt;3&lt;/sup&gt;&amp;frasl;&lt;sub&gt;4&lt;/sub&gt; of a year, I started a new job mostly programming in node.js. I&amp;rsquo;d say that, besides learning node and js, the biggest thing it gave me was the ability to navigate and debug large projects. However, I didn&amp;rsquo;t really get to practice my chops on creating my own projects, or working on harder problems (or even simply trying to get more performance from my own code).&lt;/p&gt;

&lt;p&gt;In November, I decided that I really wanted to invest more time in my coding skills. I still love work, but it would simply not give me enough practice to get to the next level. My plan was to code at a cafe every morning before work, starting at 7am. (Turns out I&amp;rsquo;m so productive at this time, now that I can actually wake up this early!).&lt;/p&gt;

&lt;p&gt;I think that this simple habit has actually done the most for my coding skills. In the previous months, it had been hard to code even 2 hours a week, and now I can easily get 9-10 hours a week.&lt;/p&gt;

&lt;p&gt;An additional help was getting good materials (which of course require regular practice to get the most out of!).&lt;/p&gt;

&lt;p&gt;My Rust journey restarted, I think, when I watched one of Steve Klabnik&amp;rsquo;s talks on concurrency in rust. I watched once, got excited, then tried to do the tutorial myself, then watched again. Hooked!&lt;/p&gt;

&lt;p&gt;Since then, I also went to a wonderful Rust Meetup taught by Niko Matsakis, which covered similar material but with more depth and some different idioms.&lt;/p&gt;

&lt;p&gt;Realizing I needed some easy exercises to get moving, I did Code Kata and Advent of Code.&lt;/p&gt;

&lt;p&gt;Bigger projects: I wanted to port some known projects to give me some baseline, so I tried wscat and my own slackbot.&lt;/p&gt;

&lt;p&gt;I think the bigger projects were great for doing some struggling. But the small exercises were great for getting some of the basics down.&lt;/p&gt;

&lt;p&gt;And along those lines, Learning Rust with Entirely Too Many Linked Lists was a great catalyst recently. After figuring out my own way of laying out programs and parsing using Advent of Code, I found out some more idiomatic ways with this tutorial. It was great to get more familiar with a library setup, as well as using pub, impl, iterators, lifetimes, and take(). I didn&amp;rsquo;t fully grock some stuff like Rc, RefCell, but it&amp;rsquo;s there when I need it! I literally typed my way through the entire tutorial, loved it all.&lt;/p&gt;

&lt;p&gt;Overall: I just wanted to put down some of the resources that have been great for me learning recently, at a time when I feel like I&amp;rsquo;m doing really well. Lots of small exercises to ingrain some basics and as a starter for hard days, getting some feedback by going through some tutorials for some more idiomatic usage of Rust. Then pushing against some bigger projects (but not too big, and starting by porting).&lt;/p&gt;

&lt;p&gt;Oh yeah, I also stopped reading hackernews.&lt;/p&gt;

&lt;p&gt;My latest: just started on porting tinydb from Python. I already implemented my own LRU cache!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Investigation, Haskell and Rust and Job Search</title>
      <link>http://waltherchen.com/post/investigation/</link>
      <pubDate>Sat, 25 Oct 2014 13:35:22 -0400</pubDate>
      
      <guid>http://waltherchen.com/post/investigation/</guid>
      <description>

&lt;p&gt;Since my last post, I&amp;rsquo;ve been doing a lot of investigating. I could have jumped even
further down the Python rabbit hole by immediately trying to start on projects. I think
two things stopped me: one, that I didn&amp;rsquo;t have a pressing need that I could address with
a project, and two, that my brain was telling me it wanted to explore more what
programming could mean. The result was a foray into Haskell.&lt;/p&gt;

&lt;h4 id=&#34;haskell:3bad70dc8c7eeec06339907fd77d9b7e&#34;&gt;Haskell&lt;/h4&gt;

&lt;p&gt;Haskell is described as a lazy, functional language that has a very strong notion of
purity. Great explanations of the language can be found at haskell.org.&lt;/p&gt;

&lt;p&gt;I had messed around with Learn You a Haskell, a great introductory book, but had not
really gotten a grasp on the language. I decided to work through CIS194, a class on
Haskell taught by Brent Yorgey at UPenn, with all materials online! The exercises ended
up being at a great level for me (similar to Think Python). I&amp;rsquo;ve currently worked through
the midway point, right before things get abstract.&lt;/p&gt;

&lt;p&gt;I think that, coming from Python, my greatest delights were:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Exteremely clean syntax&lt;/li&gt;
&lt;li&gt;Algebraic Data Types!&lt;/li&gt;
&lt;li&gt;Maps, filters and folds&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I&amp;rsquo;ve found that for me, the syntax makes it really easy to see the structure of the
program. Visual noise takes away from shape, and I&amp;rsquo;m extremely shape-oriented (as I know
from playing Go).&lt;/p&gt;

&lt;p&gt;The Algebraic Data Types (ADT) were a revelation in terms of rethinking how to organize
programs. For me, they make a lot more sense than what I know about classes and OO
programming. ADTs in Haskell are strict but extremely expressive, and can tell you so
much about the shape of a program up-front without delving into &amp;ldquo;details&amp;rdquo; of execution.&lt;/p&gt;

&lt;p&gt;Of course, to operate in the real world, there needs to be a certain amount of sacrifice
of purity. In Haskell, this often has to do with I/O. I haven&amp;rsquo;t gotten to really grapple
with this part yet, but I&amp;rsquo;m looking forward to it as I continue to learn.&lt;/p&gt;

&lt;h4 id=&#34;rust:3bad70dc8c7eeec06339907fd77d9b7e&#34;&gt;Rust&lt;/h4&gt;

&lt;p&gt;Another language I looked at recently was Rust, which is a new language often compared to
Golang. I&amp;rsquo;m glad I branched out to Haskell, because I learned some things I really
enjoyed in programming (like ADT), and those things really popped out when looking at
Rust. Rust seems to be another imperative programming language in the vein of Python or
C++, but what struck me was that it had its own implementation of ADT! I wrote some toy
programs in Rust, thinking that perhaps the combination of imperative with functional
would fit my mindset really well and make programming easy. But Rust has another trick up
its sleeve: memory-safe programming, which is actually the language&amp;rsquo;s main calling card.
I only know a little, but it looks like Rust places responsibility for keeping track of
when and where memory is allocated to variables, while also creating a framework so that
the compiler can help you keep track.&lt;/p&gt;

&lt;p&gt;Thinking about memory, as well as pointers and mutability explicitly in programs, is
pretty complicated above just making my program run. Python basically took care of it all
for me, with some cost in terms of performance, structure, and safety. Haskell takes care
of those things to, but in part by limiting the programming paradigm. The more technical,
close-to-the-metal stuff hurts my head a bit, and was definitely one of the reasons I
found programming hard in high school and college. (glad I was reintroduced through
Python!). But I&amp;rsquo;m glad to know what&amp;rsquo;s possible in a programming language.&lt;/p&gt;

&lt;h4 id=&#34;investigations:3bad70dc8c7eeec06339907fd77d9b7e&#34;&gt;Investigations&lt;/h4&gt;

&lt;p&gt;I want to keep investigating both Rust and Haskell. I guess it&amp;rsquo;ll be a little bit of
juggling as I also want to learn Python. But it does seem to me that picking up a bit of
syntax or learning a new language is not too hard for very basic competency (especially C
related languages like Rust or Python). I&amp;rsquo;ve done it a few times now, with these
languages and also Java and Turbo Pascal in the past.&lt;/p&gt;

&lt;p&gt;The real challenge for me is not being fluent in the &amp;ldquo;syntax&amp;rdquo; of the language, but to
learn how to construct programs. Right now, I don&amp;rsquo;t know how much of this will relate to
the idioms of each language (the structure of a Haskell is different in certain ways from
a Python program). But I do know that learning different idioms is good. In fact,
learning Haskell is one recommended way of getting better at Python (or even programming
in general).&lt;/p&gt;

&lt;p&gt;In any case, I&amp;rsquo;m going to keep plugging away and finding bigger projects, whatever they
may be. Currently on my radar are a toy browser engine in Rust, some exploration of AGA
ratings, some graphing for a nonlinear dynamics class, and hopefully some fun small project
in Haskell. I won&amp;rsquo;t try to go too big; I know that I need to build lots of small projects
first.&lt;/p&gt;

&lt;h3 id=&#34;job-search:3bad70dc8c7eeec06339907fd77d9b7e&#34;&gt;Job Search&lt;/h3&gt;

&lt;p&gt;So does any of this have to do with a job search? After all, I&amp;rsquo;m not building my skills
in a pattern that necessarily makes it obvious to future employers that I&amp;rsquo;m getting
better. I&amp;rsquo;ve been told quite a few times that it&amp;rsquo;s important to have projects to show,
especially for somebody who is self taught.&lt;/p&gt;

&lt;p&gt;I guess I wanted to give myself something to aspire to. While web development in and of
itself isn&amp;rsquo;t necessarily a boring job, I wanted to know a little better what it would
take to tackele interesting computational problems, whether in web development or in
another industry. I didn&amp;rsquo;t want to just aim for patching together frameworks.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m still glad I took the time to look around at the landscape and dig into some
fundamentals (I implemented binary trees in Haskell!). I know it will serve me well in
the future to have a broad outlook even at the beginning. I just have to keep going so I
can build skills that will actually be useful to employers, while also maintaining my
enthusiasm.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>